basePath: /
definitions:
  controller.ResponseError:
    properties:
      reason:
        type: string
      time:
        type: string
    type: object
  dto.AddBlogs2Categories:
    properties:
      blog_ids:
        items:
          type: string
        type: array
      category_ids:
        items:
          type: string
        type: array
    type: object
  dto.AddCategory2Category:
    properties:
      category_id:
        $ref: '#/definitions/model.Category'
      parent_id:
        example: xxxxxxx
        type: string
    type: object
  dto.AddCategory2User:
    properties:
      category_id:
        example: xxxxxxx
        type: string
      user_id:
        type: string
    type: object
  dto.ImgUploadToken:
    properties:
      file_key:
        type: string
      token:
        type: string
    type: object
  dto.LoginUserInfo:
    properties:
      email:
        example: email@qq.com
        type: string
      id:
        example: xxxxxxxxxxxxx==
        type: string
      name:
        example: account name
        type: string
      roles:
        example:
        - ordinaryUser
        items:
          type: string
        type: array
    type: object
  dto.QueryBlog:
    properties:
      authorId:
        example: xxxxxxxxxxxxx==
        type: string
      categories:
        items:
          type: string
        type: array
      cover:
        example: https://xxx/xxx
        type: string
      description:
        example: mouse ❤ monkey
        type: string
      entityInfo:
        $ref: '#/definitions/model.Entity'
      id:
        example: xxxxxxxxxxxxx==
        type: string
      keyWords:
        example:
        - xxx
        - xxx
        items:
          type: string
        type: array
      title:
        example: mouse ❤ monkey
        type: string
    type: object
  dto.QueryBlogs:
    type: object
  dto.UserInfo:
    properties:
      email:
        example: email@qq.com
        type: string
      id:
        example: xxxxxxxxxxxxx==
        type: string
      name:
        example: account name
        type: string
      roles:
        example:
        - ordinaryUser
        items:
          type: string
        type: array
      settings:
        additionalProperties:
          type: string
        example:
          '''avatar''': ' ''www.avatar.com/account_name'''
          '''site''': '''www.limfx.com''(public data)'
        type: object
    type: object
  dto.UserInfoBrief:
    properties:
      id:
        example: xxxxxxxxxxxxx==
        type: string
      name:
        example: account name
        type: string
      settings:
        additionalProperties:
          type: string
        example:
          '''avatar''': ' ''www.avatar.com/account_name'''
          '''site''': '''www.limfx.com''(public data)'
        type: object
    type: object
  model.AddAccount:
    properties:
      email:
        example: email@mo2.com
        type: string
      password:
        example: p@ssword
        type: string
      userName:
        example: account name
        type: string
    type: object
  model.AddAccountRole:
    properties:
      id:
        example: xxxxxxxxxxxxx==
        type: string
      roles:
        items:
          type: string
        type: array
      super_key:
        example: special
        type: string
    type: object
  model.Blog:
    properties:
      authorId:
        example: xxxxxxxxxxxxx==
        type: string
      categories:
        items:
          type: string
        type: array
      content:
        example: |-
          xxxx
          xxxx
        type: string
      cover:
        example: https://xxx/xxx
        type: string
      description:
        example: mouse ❤ monkey
        type: string
      entityInfo:
        $ref: '#/definitions/model.Entity'
      id:
        example: xxxxxxxxxxxxx==
        type: string
      keyWords:
        example:
        - xxx
        - xxx
        items:
          type: string
        type: array
      title:
        example: mouse ❤ monkey
        type: string
    type: object
  model.Category:
    properties:
      id:
        example: xxxxxxxxxxxxxx==
        type: string
      name:
        example: records
        type: string
      parent_id:
        example: xxxxxxxxxxxxxx==
        type: string
    type: object
  model.DeleteAccount:
    properties:
      email:
        example: email@mo2.com
        type: string
      password:
        example: p@ssword
        type: string
    type: object
  model.Entity:
    properties:
      createTime:
        example: "2020-10-1"
        type: string
      is_deleted:
        type: boolean
      updateTime:
        example: "2020-10-1"
        type: string
    type: object
  model.LoginAccount:
    properties:
      password:
        example: p@ssword
        type: string
      userNameOrEmail:
        example: account name/email@mo2.com
        type: string
    type: object
host: localhost:5001
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a Mo2 server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Mo2
  version: "1.0"
paths:
  /api/accounts:
    delete:
      consumes:
      - application/json
      description: delete by path
      parameters:
      - description: delete account info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/model.DeleteAccount'
      produces:
      - application/json
      responses:
        "202":
          description: ""
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: delete Blog
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: add new account info
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.AddAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: Add an account
      tags:
      - accounts
    put:
      consumes:
      - application/json
      description: 通过id获取已有用户，验证身份。并将name的修改与setting的修改应用
      parameters:
      - description: id必须，可修改name/settings
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.UserInfoBrief'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: 修改名称（唯一用于登录）/偏好设置
      tags:
      - accounts
  /api/accounts/detail/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID；若id为空，返回所有用户信息
      operationId: get-string-by-int
      parameters:
      - description: Account ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: Show account's info
      tags:
      - accounts
  /api/accounts/listBrief:
    get:
      consumes:
      - application/json
      description: from a list of user ids [usage]:/api/accounts/listBrief?id=60223d4042d6febff9f276f0&id=60236866d2a68483adaccc38
      parameters:
      - description: user IDs list
        in: path
        name: userIDs
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserInfoBrief'
            type: array
      summary: List accounts brief info
      tags:
      - accounts
  /api/accounts/login:
    post:
      consumes:
      - application/json
      description: login by json model.LoginAccount and set cookies
      parameters:
      - description: login account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.LoginAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginUserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: login an account
      tags:
      - accounts
  /api/accounts/logout:
    post:
      description: logout and delete cookies
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: logout
      tags:
      - accounts
  /api/accounts/role:
    post:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: add new account info
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.AddAccountRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: Add role for an account
      tags:
      - admin
  /api/accounts/verify:
    get:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: email@mo2.com
        in: query
        name: email
        required: true
        type: string
      - description: xxxx==sf
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "308":
          description: ""
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: verify an account's email
      tags:
      - accounts
  /api/blogs/{id}:
    delete:
      consumes:
      - application/json
      description: delete by path
      parameters:
      - description: bool true
        in: query
        name: draft
        required: true
        type: boolean
      - description: string xxxxxxxx
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: ""
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: delete Blog
      tags:
      - blogs
    put:
      consumes:
      - application/json
      description: restore by path
      parameters:
      - description: bool true
        in: query
        name: draft
        required: true
        type: boolean
      - description: string xxxxxxxx
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: restore Blog
      tags:
      - blogs
  /api/blogs/addBlogs2Categories:
    post:
      consumes:
      - application/json
      description: blogs 与 categories皆为id列表，方便批量操作
      parameters:
      - description: dto.AddBlogs2Categories
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/dto.AddBlogs2Categories'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.QueryBlog'
            type: array
      summary: add blogs to chosen categories
      tags:
      - category
  /api/blogs/addCategory:
    post:
      consumes:
      - application/json
      description: add by json
      parameters:
      - description: Add category
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      summary: upsert category
      tags:
      - category
  /api/blogs/addCategory2Category:
    post:
      consumes:
      - application/json
      description: category为model.Category(若id存在，直接存放；否则新建) parent category 为id
      parameters:
      - description: category info and parent id
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/dto.AddCategory2Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      summary: add category to parent category
      tags:
      - category
  /api/blogs/addCategory2User:
    post:
      consumes:
      - application/json
      description: user 与 category 皆为id
      parameters:
      - description: category id and user id
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/dto.AddCategory2User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AddCategory2User'
      summary: add category to user
      tags:
      - category
  /api/blogs/find/id:
    get:
      consumes:
      - application/json
      parameters:
      - description: bool true
        in: query
        name: draft
        type: boolean
      - description: string xxxxxxxx
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: find Blog by id
      tags:
      - blogs
  /api/blogs/find/own:
    get:
      consumes:
      - application/json
      parameters:
      - description: bool true
        in: query
        name: draft
        type: boolean
      - description: bool default false
        in: query
        name: deleted
        type: boolean
      - description: int 0
        in: query
        name: page
        type: integer
      - description: int 5
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.QueryBlogs'
            type: array
        "204":
          description: No Content
          schema:
            items:
              $ref: '#/definitions/dto.QueryBlogs'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: find Blog
      tags:
      - blogs
  /api/blogs/find/userId:
    get:
      consumes:
      - application/json
      parameters:
      - description: bool true
        in: query
        name: draft
        type: boolean
      - description: bool default false
        in: query
        name: deleted
        type: boolean
      - description: string xxxxxxxx
        in: query
        name: id
        type: string
      - description: int 0
        in: query
        name: page
        type: integer
      - description: int 5
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.QueryBlogs'
            type: array
        "204":
          description: No Content
          schema:
            items:
              $ref: '#/definitions/dto.QueryBlogs'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: find Blog by userid
      tags:
      - blogs
  /api/blogs/findAllCategories:
    get:
      description: 若id为空，返回所有categories；若id不为空，返回该id的category
      parameters:
      - description: string ObjectID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
      summary: find categories
      tags:
      - category
  /api/blogs/findCategoriesByUserId:
    get:
      description: return (main category)个人的主存档 于前端不可见，用于后端存储
      parameters:
      - description: string ObjectID
        in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/model.Category'
              type: array
            type: object
      summary: find categories by user id
      tags:
      - category
  /api/blogs/findCategoryByUserId:
    get:
      description: return (main category)个人的主存档 于前端不可见，用于后端存储
      parameters:
      - description: string ObjectID
        in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
      summary: find category by user id
      tags:
      - category
  /api/blogs/publish:
    post:
      consumes:
      - application/json
      description: add by json
      parameters:
      - description: bool true
        in: query
        name: draft
        type: boolean
      - description: Add blog
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.Blog'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Blog'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: Publish Blog
      tags:
      - blogs
  /api/blogs/query:
    get:
      description: find
      parameters:
      - description: bool default false
        in: query
        name: draft
        type: boolean
      - description: bool default false
        in: query
        name: deleted
        type: boolean
      - description: int 0
        in: query
        name: page
        type: integer
      - description: int 5
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.QueryBlog'
            type: array
        "204":
          description: No Content
          schema:
            items:
              $ref: '#/definitions/dto.QueryBlog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ResponseError'
      summary: find all Blogs
      tags:
      - blogs
  /api/img/{filename}:
    get:
      description: add by json
      parameters:
      - description: file name
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ImgUploadToken'
      summary: Gen img token
      tags:
      - img
  /api/logs:
    get:
      consumes:
      - application/json
      description: get by check cookies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginUserInfo'
      summary: get user info
      tags:
      - logs
  /sayHello:
    get:
      description: say something
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: simple test
swagger: "2.0"
