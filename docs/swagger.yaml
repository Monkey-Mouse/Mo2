basePath: /
definitions:
  badresponse.ResponseError:
    properties:
      reason:
        type: string
      time:
        type: string
    type: object
  dto.ImgUploadToken:
    properties:
      file_key:
        type: string
      token:
        type: string
    type: object
  dto.RelateEntity2Entity:
    properties:
      relateTo_id:
        type: string
      related_id:
        type: string
    type: object
  dto.RelateEntitySet2Entity:
    properties:
      relateTo_id:
        type: string
      related_ids:
        items:
          type: string
        type: array
    type: object
  dto.UserInfo:
    properties:
      email:
        example: email@qq.com
        type: string
      id:
        example: xxxxxxxxxxxxx==
        type: string
      name:
        example: account name
        type: string
      roles:
        example:
        - ordinaryUser
        items:
          type: string
        type: array
      settings:
        additionalProperties:
          type: string
        example:
          '''avatar''': ' ''www.avatar.com/account_name'''
          '''site''': '''www.limfx.com''(public data)'
        type: object
    type: object
  dto.UserInfoBrief:
    properties:
      email:
        example: email@qq.com
        type: string
      id:
        example: xxxxxxxxxxxxx==
        type: string
      name:
        example: account name
        type: string
      settings:
        additionalProperties:
          type: string
        example:
          '''avatar''': ' ''www.avatar.com/account_name'''
          '''site''': '''www.limfx.com''(public data)'
        type: object
    type: object
  model.AddAccount:
    properties:
      email:
        example: email@mo2.com
        type: string
      password:
        example: p@ssword
        type: string
      userName:
        example: account name
        type: string
    type: object
  model.AddAccountRole:
    properties:
      id:
        example: xxxxxxxxxxxxx==
        type: string
      roles:
        items:
          type: string
        type: array
      super_key:
        example: special
        type: string
    type: object
  model.Blog:
    properties:
      authorId:
        example: xxxxxxxxxxxxx==
        type: string
      categories:
        items:
          type: string
        type: array
      content:
        example: |-
          xxxx
          xxxx
        type: string
      cover:
        example: https://xxx/xxx
        type: string
      description:
        example: mouse ❤ monkey
        type: string
      entityInfo:
        $ref: '#/definitions/model.Entity'
      id:
        example: xxxxxxxxxxxxx==
        type: string
      keyWords:
        example:
        - xxx
        - xxx
        items:
          type: string
        type: array
      title:
        example: mouse ❤ monkey
        type: string
    type: object
  model.Comment:
    properties:
      article:
        type: string
      aurhor:
        type: string
      content:
        example: a comment
        type: string
      entity_info:
        $ref: '#/definitions/model.Entity'
      id:
        example: xxxxxxxxxxxxxx==
        type: string
      praise:
        $ref: '#/definitions/model.Praiseable'
      subs:
        items:
          $ref: '#/definitions/model.Subcomment'
        type: array
    type: object
  model.DeleteAccount:
    properties:
      email:
        example: email@mo2.com
        type: string
      password:
        example: p@ssword
        type: string
    type: object
  model.Directory:
    properties:
      id:
        example: xxxxxxxxxxxxxx==
        type: string
      info:
        $ref: '#/definitions/model.DirectoryInfo'
      name:
        example: records
        type: string
      owner_ids:
        items:
          type: string
        type: array
      parent_id:
        example: xxxxxxxxxxxxxx==
        type: string
    type: object
  model.DirectoryInfo:
    properties:
      cover:
        example: https://www.motwo.cn/cover
        type: string
      description:
        example: course materials
        type: string
    type: object
  model.Entity:
    properties:
      createTime:
        example: "2020-10-1"
        type: string
      is_deleted:
        type: boolean
      updateTime:
        example: "2020-10-1"
        type: string
    type: object
  model.LoginAccount:
    properties:
      password:
        example: p@ssword
        type: string
      userNameOrEmail:
        example: account name/email@mo2.com
        type: string
    type: object
  model.Praiseable:
    properties:
      down:
        type: integer
      up:
        type: integer
      weighted:
        type: integer
    type: object
  model.Subcomment:
    properties:
      aurhor:
        type: string
      content:
        example: a comment
        type: string
      entity_info:
        $ref: '#/definitions/model.Entity'
      id:
        example: xxxxxxxxxxxxxx==
        type: string
      praise:
        $ref: '#/definitions/model.Praiseable'
    type: object
host: localhost:5001
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a Mo2 server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Mo2
  version: "1.0"
paths:
  /api/accounts:
    delete:
      consumes:
      - application/json
      description: delete by path
      parameters:
      - description: delete account info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/model.DeleteAccount'
      produces:
      - application/json
      responses:
        "202":
          description: ""
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: delete Blog
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: add new account info
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.AddAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: Add an account
      tags:
      - accounts
    put:
      consumes:
      - application/json
      description: 通过id获取已有用户，验证身份。并将name的修改与setting的修改应用
      parameters:
      - description: id必须，可修改name/settings
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.UserInfoBrief'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: 修改名称（唯一用于登录）/偏好设置
      tags:
      - accounts
  /api/accounts/detail/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID；若id为空，返回所有用户信息
      operationId: get-string-by-int
      parameters:
      - description: Account ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: Show account's info
      tags:
      - accounts
  /api/accounts/listBrief:
    get:
      consumes:
      - application/json
      description: from a list of user ids [usage]:/api/accounts/listBrief?id=60223d4042d6febff9f276f0&id=60236866d2a68483adaccc38
      parameters:
      - description: user IDs list
        in: query
        name: id
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserInfoBrief'
            type: array
      summary: List accounts brief info
      tags:
      - accounts
  /api/accounts/login:
    post:
      consumes:
      - application/json
      description: login by json model.LoginAccount and set cookies
      parameters:
      - description: login account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.LoginAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: login an account
      tags:
      - accounts
  /api/accounts/logout:
    post:
      description: logout and delete cookies
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: logout
      tags:
      - accounts
  /api/accounts/role:
    post:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: add new account info
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.AddAccountRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: Add role for an account
      tags:
      - admin
  /api/accounts/verify:
    get:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: email@mo2.com
        in: query
        name: email
        required: true
        type: string
      - description: xxxx==sf
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "308":
          description: ""
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: verify an account's email
      tags:
      - accounts
  /api/admin/indexblogs:
    post:
      description: none
      responses:
        "200":
          description: ""
      summary: index all blogs
      tags:
      - admin
  /api/blogs/{id}:
    delete:
      consumes:
      - application/json
      description: delete by id path(draft/blog)
      parameters:
      - description: bool true
        in: query
        name: draft
        required: true
        type: boolean
      - description: string xxxxxxxx
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: ""
        "204":
          description: ""
        "304":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: 彻底删除blog
      tags:
      - blogs
  /api/blogs/{operation}/{id}:
    put:
      consumes:
      - application/json
      description: restore by path
      parameters:
      - description: bool true
        in: query
        name: draft
        required: true
        type: boolean
      - description: recycle/restore
        in: path
        name: operation
        type: string
      - description: Blog id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: restore Blog
      tags:
      - blogs
  /api/blogs/category:
    get:
      description: 若id为空，返回所有categories(debug mode)；若id不为空，返回该id的category
      parameters:
      - description: string ObjectID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Directory'
            type: array
      summary: find categories
      tags:
      - category
    post:
      consumes:
      - application/json
      description: add by json
      parameters:
      - description: Add category
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.Directory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Directory'
      summary: upsert category
      tags:
      - category
  /api/blogs/find/id:
    get:
      consumes:
      - application/json
      parameters:
      - description: bool true
        in: query
        name: draft
        type: boolean
      - description: string xxxxxxxx
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: find Blog by id
      tags:
      - blogs
  /api/blogs/find/own:
    get:
      consumes:
      - application/json
      parameters:
      - description: bool true
        in: query
        name: draft
        type: boolean
      - description: bool default false
        in: query
        name: deleted
        type: boolean
      - description: int 0
        in: query
        name: page
        type: integer
      - description: int 5
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Blog'
            type: array
        "204":
          description: No Content
          schema:
            items:
              $ref: '#/definitions/model.Blog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: find Blog
      tags:
      - blogs
  /api/blogs/find/userId:
    get:
      consumes:
      - application/json
      parameters:
      - description: bool true
        in: query
        name: draft
        type: boolean
      - description: bool default false
        in: query
        name: deleted
        type: boolean
      - description: string xxxxxxxx
        in: query
        name: id
        type: string
      - description: int 0
        in: query
        name: page
        type: integer
      - description: int 5
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Blog'
            type: array
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: find Blog by userid
      tags:
      - blogs
  /api/blogs/publish:
    post:
      consumes:
      - application/json
      description: add by json
      parameters:
      - description: bool true
        in: query
        name: draft
        type: boolean
      - description: Add blog
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model.Blog'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Blog'
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: Publish Blog
      tags:
      - blogs
  /api/blogs/query:
    get:
      description: find
      parameters:
      - description: bool default false
        in: query
        name: draft
        type: boolean
      - description: bool default false
        in: query
        name: deleted
        type: boolean
      - description: int 0
        in: query
        name: page
        type: integer
      - description: int 5
        in: query
        name: pageSize
        type: integer
      - description: aaaa
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Blog'
            type: array
        "204":
          description: No Content
          schema:
            items:
              $ref: '#/definitions/model.Blog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: find all Blogs
      tags:
      - blogs
  /api/comment:
    post:
      consumes:
      - application/json
      description: upsert json comments
      parameters:
      - description: comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Comment'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: upsert comments
      tags:
      - comments
  /api/comment/{id}:
    get:
      consumes:
      - application/json
      description: get json comments
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      - description: int 0
        in: query
        name: page
        type: integer
      - description: int 5
        in: query
        name: pagesize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Comment'
            type: array
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: get comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: upsert json comments
      parameters:
      - description: comment id
        in: path
        name: id
        required: true
        type: string
      - description: subcomment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.Subcomment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Subcomment'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: upsert subcomments
      tags:
      - comments
  /api/commentcount/{id}:
    get:
      description: get article comment num
      parameters:
      - description: article id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: count comments
      tags:
      - comments
  /api/directories/{collection}:
    get:
      consumes:
      - application/json
      description: from a list of directory ids [usage]:/api/directories/{collection}?id=60223d4042d6febff9f276f0&id=60236866d2a68483adaccc38
      parameters:
      - description: category/...
        in: path
        name: collection
        required: true
        type: string
      - description: directory IDs list
        in: query
        name: id
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Directory'
            type: array
      summary: List directories brief info
      tags:
      - directory
  /api/directories/category:
    delete:
      consumes:
      - application/json
      description: 根据id删除，并解除与之相关实体的所有关联
      parameters:
      - description: category id to delete
        in: body
        name: ids
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Directory'
      summary: delete category
      tags:
      - category
  /api/file:
    post:
      consumes:
      - multipart/form-data
      description: say something
      parameters:
      - description: file
        in: body
        name: form
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: simple test
  /api/img/{filename}:
    get:
      description: add by json
      parameters:
      - description: file name
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ImgUploadToken'
      summary: Gen img token
      tags:
      - img
  /api/logs:
    get:
      consumes:
      - application/json
      description: get by check cookies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
      summary: get user info
      tags:
      - logs
  /api/notification:
    get:
      description: get notifications
      parameters:
      - description: int 0
        in: query
        name: page
        type: integer
      - description: int 5
        in: query
        name: pagesize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: get notifications
      tags:
      - notification
  /api/notification/num:
    get:
      description: get notification num
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: get notification num
      tags:
      - notification
  /api/relation/blogs/{type}/{ID}:
    get:
      consumes:
      - application/json
      description: 根据type返回不同结果：[category] 所有category包含的blog
      parameters:
      - description: find by category
        in: path
        name: type
        required: true
        type: string
      - description: ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Blog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: find blogs by given type
      tags:
      - relation
  /api/relation/categories/{type}:
    post:
      consumes:
      - application/json
      description: （根据path中提供的关联类型选择对应方法）目前有：父category
      parameters:
      - description: types to relate
        in: path
        name: type
        required: true
        type: string
      - description: sub category id and parent id
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/dto.RelateEntitySet2Entity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Directory'
      summary: 将列表内的子categories关联到单个实体上
      tags:
      - relation
  /api/relation/category/{type}:
    post:
      consumes:
      - application/json
      parameters:
      - description: relatedTo user/blog/category/userMain
        in: path
        name: type
        required: true
        type: string
      - description: category id to be related
        in: body
        name: e2e
        required: true
        schema:
          $ref: '#/definitions/dto.RelateEntity2Entity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RelateEntity2Entity'
      summary: relate category to given type
      tags:
      - relation
  /api/relation/category/{type}/{ID}:
    get:
      consumes:
      - application/json
      description: 根据type返回不同结果：[user] 个人的所有category|[sub] 所有子category
      parameters:
      - description: find by user/sub
        in: path
        name: type
        required: true
        type: string
      - description: ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Directory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/badresponse.ResponseError'
      summary: find categories by given type
      tags:
      - relation
swagger: "2.0"
